Controller의 역할은 경로의 연결만 한다. - view와
Controller는 service를 호출해서 service에서 연산을 한다.
dao는 DB와 관련된 기능을 수행한다

Controller - view , service 연결
service 연산
dao - DB기능

서버에 에러가 발생함 > 기본 경로가 충돌이 일어나는 것.
패키지의 마지막 이름이 기본 경로임 
지금 Controller라는 경로가 2개 존재해서 에러가 발생함.
server프로젝트의 server.xml의 Context경로를 수정하면 에러 해결됨

Model에 설정한 request의 속성을 받아올 때 사용하는 기능
@Override
	public void execute(Model model) {
		Map<String, Object> map = model.asMap();
		// controller에서 model에 설정한 속성인 request를 받아올려면 맵으로 받아야 한다.
		HttpServletRequest request = (HttpServletRequest)map.get("request");
		// save_view.jsp에서 입력한 파라미터 값이 여기에 저장되어 있음
		String id = request.getParameter("id");
		String name = request.getParameter("name");
	}
	
	
	
	@RequestMapping("save")
	public String save(Model model, HttpServletRequest request) {
		model.addAttribute("request", request); // request에 파라미터 값이 저장되어 있음, 매개변수를 model하나만 쓰기위해서 이렇게 사용
		jdbc = new JdbcSaveServiceImpl();
		jdbc.execute(model);
		return "redirect:content";
		// return "jdbc_test/content"
		// 위와 같이 사용하면 안된다.
		// 페이지를 바로 이동시키는 기능이기 때문에 content()에서 실행되어야 할 dao.list()가 실행이 되지 않기 때문이다. > content에 아무런 데이터가 없음
		// 그래서 redirect:content의 의미는 위의 content()mapping을 실행하는 것이다.
	}
	
다음엔 xml파일로 설정들을 전부 옮김.


/*spring xml파일로 db설정*/
아래의 내용을 pom.xml의 118 junit의 dependency 끝나는 부분에 복붙을 한다.
<!-- JDBC Template -->
 <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>4.1.4.RELEASE</version>
 </dependency>
 위의 내용을 복붙하고 약간의 시간을 기다리면 위의 라이브러리가 추가됨.
 
 아래 내용은 xml파일로 데이터베이스와 연결하는 속성이다.
 spring-jdbc.jar라는 라이브러리
<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
   <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
   <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
   <property name="username" value="c##jsp" />
   <property name="password" value="1234" />
</bean>
<bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
   <property name="dataSource" ref="dataSource" />
</bean>
 
/*template 사용*/
String sql = "select * from test_jdbc";
		ArrayList<JdbcDTO> list = null;
		try {
			list = (ArrayList<JdbcDTO>)template.query(sql, 
					new BeanPropertyRowMapper<JdbcDTO>(JdbcDTO.class));
		} catch(Exception e) {
			e.printStackTrace();
		}
		return list;

String sql = "insert into test_jdbc(id, name) values(?, ?)";
		template.update(sql, new PreparedStatementSetter() { // sql의 변수 넣을 때
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setString(1, id);
				ps.setString(2, name);
				// id와 name이 에러인 이유 :
				// 이 변수가 중간에 수정되어 안정성이 위배된다. 
				// 입력받는 매개변수를 final로 수정해 안정성을 확보하면 된다.
			}
		});
 

